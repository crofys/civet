// Generated by dts-bundle v0.7.3

export namespace civet {
  /**
      * verson of civet extension
      */
  export const version: string;
  class ExtensionContext {
    constructor();
    send(msg: string | ArrayBuffer): void;
    get currentDB(): string;
    set currentDB(dbname: string);
    static _isConnecting: boolean;
  }
  export class IResource {
    readonly id: number;
    readonly type: string;
    readonly name: string;
    path: string[];
    meta: JSON;
    tag: string[];
    category: string[];
    anno?: string[];
    keyword: string[];
    [propName: string]: any;
    load(path: string): Thenable<boolean>;
    save(path: string): Thenable<boolean>;
  }
  interface Thenable<T> {
    then<TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: any) => TResult | Thenable<TResult>): Thenable<TResult>;
    then<TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: any) => void): Thenable<TResult>;
  }
  /**
      * extension context
      */
  export let extensionContext: ExtensionContext;
  export function activate(context: ExtensionContext): any;
  export function unactivate(): any;
  export interface IProperty {
    readonly key: string;
  }
  /**
      * resource of uri, such as file, web page, or remote machine setting etc.
      */
  export let resource: IResource;
  export { };
}

