<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>civet</title>
    <% if (htmlWebpackPlugin.options.nodeModules) { %>
      <!-- Add `node_modules/` to global paths so `require` works properly in development -->
      <script>
        require('module').globalPaths.push('<%= htmlWebpackPlugin.options.nodeModules.replace(/\\/g, '\\\\') %>')
      </script>
    <% } %>
  </head>
  <body style="overflow:hidden">
    <script>
      let _cv_command_args = {}
      let _cv_message_id_ = 0
      const _cv_events = (function() {
        const { EventEmitter } = require('events')
        let events = new Map()
        return {
          get: function(id) {
            if (events[id] === undefined) {
              events[id] = new EventEmitter()
            }
            return events[id]
          },
          emit: function(id, event, value) {
            console.info('emit', event, 'to', id)
            if (!events[id]) {
              console.error('event ', id, 'not exist')
              return
            }
            return events[id].emit(event, value)
          },
          on: function(id, event, listener) {
            if (!events[id]) {
              events[id] = new EventEmitter()
              console.info(id, 'EventEmitter On', event)
            }
            events[id].on(event, listener)
          }
        }
      })()
      const _cv_messageSender_ = (function() {
        const { ipcRenderer } = window.require('electron')
        return {
          send: function(type, msg) {
            ipcRenderer.send('message-from-renderer', {
              id: _cv_message_id_++,
              type: type,
              data: msg
            })
          }
        }
      })()
      
      const acquireCivetApi = (function() {
        const Overview = {
          click: function(id) {
            _cv_events.emit('PropertyView', 'click', id)
            _cv_messageSender_.send('getSelectContentItemInfo', {id: [id]})
          },
          rclick: function(x, y, id) {},
          remove: function(id) {
            console.info('remove item:', id)
          },
          on: function(event, listener) {
            _cv_events.on('Overview', event, listener)
          }
        }
        return function() {
          return {
            postMessage: function(args) {
              if (args['command']) {
                const command = args['command']
                delete args['command']
                console.info('emit', command, args)
                _cv_events.emit('civet', command, args)
              }
            },
            injectCommandParams: function (command, args) { _cv_command_args[command] = args },
            events: _cv_events,
            Overview: Overview
          }
        }
      })()
    </script>
    <div id="app"></div>
    <!-- Set `__static` path to static files in production -->
    <% if (!process.browser) { %>
      <script>
        if (process.env.NODE_ENV !== 'development') window.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
      </script>
    <% } %>
    <!-- webpack builds are automatically injected -->
    <style>
      .selected {
        font-size: 14px;
        background-color:rgb(16, 125, 197);
      }
      /* .el-scrollbar__wrap {
        overflow-x: hidden;
      } */
      .el-select-dropdown__item{
        list-style: none;
        font-size: 12px;
        padding: 0 20px;
        position: relative;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #eee;
        height: 30px;
        line-height: 30px;
        box-sizing: border-box;
        cursor: pointer;
      }
      .el-select-dropdown__list{
        color: #eee;
        list-style: none;
        padding: 6px 0;
        margin: 0;
        box-sizing: border-box;
      }
      .el-select-dropdown__wrap{
        margin-bottom: 0px;
      }
      .el-color-picker__trigger {
        height: 20px;
        width: 20px;
        transform: translateY(4px);
        padding: 0;
        border: 0;
      }
      .el-color-picker--mini .el-color-picker__trigger{
        height: 20px;
        width: 20px;
      }
      .modal{
        background-color: #222933;
        font-size: 14px;
        font-weight: 600;
        color: aliceblue;
      }
      </style>
  </body>
</html>
